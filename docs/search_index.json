[["index.html", "A Minimal Introduction to Ecological Forecasting and Reproducible Research 1 Overview 1.1 General 1.2 Lectures and practicals 1.3 Preparation 1.4 A bit about me 1.5 Acknowledgements and further reading:", " A Minimal Introduction to Ecological Forecasting and Reproducible Research Jasper Slingsby 2021-10-04 1 Overview This module is a minimal introduction to Ecological Forecasting and Reproducible Research for the 3rd year undergraduate Biological Sciences BIO3019S class at the University of Cape Town. 1.1 General I provide a very brief introduction to the framework for Ecological Forecasting. We only have a two weeks, so this really is a minimalist introduction. I’ll focus on providing a broad overview of the general framework and motivation for ecological forecasting, but won’t have time to delve into the more gory theoretical and statistical details. I mostly use Ecological Forecasting as a framework to highlight various themes and principles that are increasingly important for quantitative biologists - understanding how we inform or make decisions; managing data; working reproducibly; propagating, understanding and reducing uncertainty, etc. Not all of this is fun and exciting, but as I said, it is important stuff for quantitative biologists to know. I’ll try my best to make it interesting! Hopefully by the end of the module you’ll see the value in it all - both for you as an individual and for science and society in general. The core outcomes/concepts I hope you’ll come away with: To be able to situate the role of models and the importance of forecasting in science and ecological decision making Familiarity with the concepts and understand the need for Open, Reproducible Science Familiarity with The Data Life Cycle Familiarity with the value and flexibility of Bayesian statistical methods Some familiarity with sources of uncertainty and the need to characterize, propagate, analyze, reduce and present uncertainties when forecasting 1.2 Lectures and practicals Lectures Lectures will be held live, but online 12:00 - 12:45 from the 30th September to the 13th October. The Zoom link (see Vula) should stay the same for all lecture sessions. I’ll be adding to (and mostly teaching from) these online course notes as we go along. Practicals There is only one practical for this module, 2-5PM on Tuesday the 5th October. There is a separate Zoom link (see Vula). Your report on th practical will be due on Friday, 8 October, 11AM - You will be evaluated on how well you completed the Github task during the prac and your answers to a short set of questions about the analyses. Answering the questions shouldn’t take more than half an hour. Note that we will be covering most of the questions in the lecture on Friday, so if you haven’t submitted your report by 11AM on Friday you will get zero for those questions! 1.3 Preparation For the lecture content: The following 4 minute video will give yo a glossy overview of what most of this module is about You are expected to read Dietze et al. (2018) for Monday the 4th October. You can download it here. For the practical: You need to install and set up RStudio and Github and test your setup. You can find the 11-step instructions in section 2. This may be a bit tedious, but there’s no other option really. I’ve done my best to make it as painless as possible. It should take you about an hour if all goes well… (less if you have R and RStudio installed already). PLEASE DO THE SETUP THIS WEEK!!! I will check in on Monday to see if people are having issues, but don’t expect my help if you haven’t tried by yourself first. Trust me, I will be able to tell… 1.4 A bit about me I’m an ecologist who has become more quantitative through time, but has little formal training in quantitative methods (i.e. I’ve learnt by doing over the past 20 years). As such, I still make elementary mistakes. In fact, the entry requirements for this course are beyond my formal training, so you may have much to teach me! If you spot any errors, confusion or contradictions, please let me know and I’ll get back to you and/or update the course notes accordingly. Hopefully by the end of the course you can suggest changes directly using pull requests to the GitHub repository for the course notes. 1.5 Acknowledgements and further reading: The following resources were instrumental in me pulling this material together and are worth spending time exploring. I cite my sources throughout the course notes, so check out the references at the end of each section and the end of the course notes for more. ecoforecast.org Dietze, Michael C. 2017. Ecological Forecasting. Princeton University Press. https://doi.org/10.2307/j.ctvc7796h. Dietze, Michael C. et al. 2018. “Iterative near-Term Ecological Forecasting: Needs, Opportunities, and Challenges.” Proceedings of the National Academy of Sciences of the United States of America 115 (7): 1424–32. https://doi.org/10.1073/pnas.1710231115. All code, images, etc can be found here. I have only used images and other materials that were made available online under a non-restrictive license (Creative Commons, etc) or for which I have express permission, and have attributed my sources. Content without attribution is my own and shared under the license below. If there are any errors or any content you find concerning with regard to licensing, or that you find offensive, please contact me. Any feedback, positive or negative, is welcome! This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. References "],["pracprep.html", "2 Preparation for the practical", " 2 Preparation for the practical For the practical, we’ll be using the R statistical programming language and the Git version control system. We’ll also be using an integrated development environment (IDE) for each: RStudio and GitHub, respectively. The installation and setup can be a bit long-winded, but once done you should be good to go until you change or reformat your computer. The steps below are my summary and (hopefully) more intuitive adaptation of the instructions provided for setting up GitHub and version control with R. If my steps don’t work its probably best to read up there. First we’ll start with the necessary software. Download and install the latest version of R Download and install the latest free version of RStudio Desktop Download and install the latest version of Git - accept all the defaults Then get started with GitHub: Create a GitHub account Run through the 10 minute GitHub tutorial that is offered when you activate your GitHub Account (It’ll really help you get the idea behind what Git does!) Now you have RStudio, R and Git installed, and you have a working GitHub account that lets you do stuff online, but what remains is to get GitHub working locally and configuring RStudio to use GitHub. Install GitHub CLI (Command Line Interface). For Windows you can download the installer here Open RStudio. Select the Terminal tab (top left, next to Console) Enter gh auth login, then follow the prompts: Select GitHub.com When prompted for your preferred protocol for Git operations, select HTTPS When asked if you would like to authenticate to Git with your GitHub credentials, enter Y When asked how you would like to authenticate select Login with web browser Copy the 8-digit code and hit Enter Github.com will open in your internet browser - paste the code and hit enter If any of these steps don’t work, just start again with gh auth login in Terminal In RStudio Go to Global Options (from the Tools menu) Click Git/SVN Make sure Enable version control interface for RStudio projects is on If necessary, enter the path for your Git or SVN executable where provided (this shouldn’t be needed, but may) Click Apply Restart RStudio Ok, now everything should be working. The next steps (explained below) are to fork and clone your first repo to see if everything is working, and then to modify a file in RStudio, push it back to your forked repo, and then create a pull request for me to review and accept your changes. This let’s me know that you’ve made it through the preparation for the practical, and it gives me your GitHub username. In GitHub: Make sure you are logged in, search and navigate to JasperUCT/pullltest (spot the 3 “l”s!) Click Fork, which will make a copy of the repository to your own workspace Copy the URL to your own version and follow the instructions below for cloning the repository in RStudio In RStudio: In the top-right of the window you’ll see Project: (None) - click on it and select New Project then Version Control then Git In the Repository URl: box paste the URL to your forked repo (It should look something like : https://github.com/YourGitHubUsername/your-forked-repo_name.git Project directory name should fill automatically For Create project as subdirectory of: hit Browse and navigate through your file system to where you want to put your folder for storing your Git repositories. I recommend something like ~Documents/GIT (If you’ve used Git before you may have set this already and can skip this step) Click Create Repository Your RStudio window should now look like this: Figure 2.1: What you should see… Note there are three files in the Files tab in the bottom-right window, and you should see a Git tab for the top-right window. It also says pullltest in the project drop-down top-right on mine, but yours will display the name you gave your forked repo. Open the README.md file in RStudio Add your message (something like “Hi! This is Real Name and I’ve made it this far!!!”) and save the file Select the Git tab in the top-right window Check the box next to README.md and click Commit Add a Commit message to say what changes you’ve made Then hit Push It will ask you to authenticate. Select Authenticate in your web browser. The web browser will ask you to give Git permissions. Allow the permissions and it should work. If you get an error at this point to the effect of “You do not have permission to push to this repository,” then you may have forgotten to fork your own repo from my one and are trying to push to mine… If so, start again from step 9. Final step!!! In GitHub (i.e. online) Click Pull requests (top-leftish) Click New pull request (green, top-right) Click Create pull request (green, top-right) It should already be on this repo unless you’ve been doing other things in Git In the comment window put your name so I know who you are if it isn’t obvious from your GitHub username Click Create pull request (green, bottom-right) And you’re done!!! I’ll get a notification of your pull request and, if all’s in order, I’ll accept it. If not, I’ll reply with a comment on the pull request. You should receive a notification via the email you registered with your GitHub account. "],["models.html", "3 Models and decision making 3.1 The basics of making a decision 3.2 Getting quantitative 3.3 Iterative decision-making 3.4 Iterative decision-making and the scientific method 3.5 The importance of prediction in ecology 3.6 Iterative near-term ecological forecasting 3.7 Iterative ecological forecasting in context 3.8 Reproducible research", " 3 Models and decision making What factors do you consider when making a decision? 3.1 The basics of making a decision Informing decisions typically requires knowing (or guessing at) something about the future. To this end, once a problem and the need to make a decision have been identified, the factors we consider when making that decision usually include: Evidence Experience Expectation Uncertainty The relationship between these can be represented like so: Figure 3.1: The factors considered when making a decision. Your decision is typically based on your expectation of the outcome. This expectation is based on existing evidence and/or previous experience. Uncertainty is a part of each step. There are a number of reasons why the existing evidence or previous experience may be imperfect for the decision at hand, leading to uncertainty in the expectations. There may also be uncertainty in the way in which you use the evidence and experience to develop your expectation. We’ll come back to these sources of uncertainty later in the module, but needless to say, quantifying and understanding the uncertainty is crucial in any decision. If uncertainty is high your expectation may be no better than random, and thus useless for informing your decision. Quantifying uncertainty properly helps us circumvent two evils which could mislead decision makers: being falsely overconfident in our predictions (potentially leading to a “wrong” decision), or being falsely uncertain in our predictions (which would encourage overly conservative decisions/actions which may be wasteful or less effective). Lastly, ignoring or quantifying uncertainty incorrectly can lead to bias predictions. 3.2 Getting quantitative The nice thing about the framework above is that it is similar whether you are approaching the decision qualitatively or quantitatively (i.e. using models and data to inform your decision). Figure 3.2: Using models and data when making a decision. Following a quantitative approach the “evidence” is typically empirical data, which can be fed into a model to make forecasts that can help inform the decision. The “experience” are the current state of knowledge and your prior belief, which you use to specify the type and structure of your model (or ensemble of models) and the scenario(s) you want to evaluate. The “experience” can also help you evaluate the assumptions of your model(s), and, if you are using a Bayesian model, can be included directly in the model when specifying your prior beliefs (more on this later in the module). Figure 3.3: A hypothetical example where a model can help you make a decision. The data (points) are the evidence, while the experience or current state of knowledge are used to specify the model (a linear model in this case). Here the relationship between effort invested and reward is nearly 1 to 1, suggesting to the decision-maker that the more effort you invest, the more reward you will reap. That said, there is scatter around in the points around the 1:1 line, suggesting some uncertainty. 3.3 Iterative decision-making Few decisions in natural resource management are once-off, and most are made repeatedly at some time-step (e.g. daily, monthly, seasonally, annually, decadally, etc). Should you burn, cull, harvest, restore, etc? While one should always evaluate the outcome of your decision, this does not always happen… Evaluating the outcome is especially important when the decision will need to be repeated, so that you can learn from experience. Figure 3.4: Iterative decision making. When using quantitative forecasts this can be done by collecting new data and updating your prior knowledge by evaluating the outcomes of the decision against the original model forecasts. This can tell you whether your forecast was any good and whether you need to refine or replace your model, consider additional scenarios or inputs, etc. We’ll discuss doing this quantitatively in section ??, by fusing your new data and knowledge into a new forecast. Figure 3.5: Revisiting our Effort to Reward example, what would you do if the decision-maker decided to invest huge effort, but the next few data points looked like this? 3.4 Iterative decision-making and the scientific method It’s worth highlighting the similarity between the iterative decision making cycle I’ve outlined in Figure 3.4 and the scientific method, i.e.: Observation &gt; Hypothesis &gt; Experiment &gt; Analyze &gt; Interpret &gt; Report &gt; (Repeat) Figure 3.6: The Scientific Method overlain on iterative decision making. So a focus on iterative decision-making facilitates iterative learning (i.e. scientific progress). 3.5 The importance of prediction in ecology “prediction is the only way to demonstrate scientific understanding” (Houlahan et al. 2017) While this view may be slightly overstated, it is a very good point. If we cannot make reasonably good predictions, we’re missing something. Unfortunately, prediction has not been a central focus in ecology, impeding progress in the improvement of our ecological understanding. In ecology we mostly test qualitative, imprecise hypotheses: “Does X have an effect on Y?” rather than “What is the relationship between X and Y?” or better yet “What value would we expect Y to be, given a particular value of X?”. Without testing precise hypotheses and using the results to make testable predictions we don’t know if our findings are generalizable beyond the specific data set we collected. If our results are not generalizable, then we’re not really making progress towards a better understanding of ecology. Figure 3.7: Prediction… from xkcd.com/2370, used under a CC-BY-NC 2.5 license. To make predictions we need models, and models provide structured summaries of our current ecological understanding (conceptual or quantitative, but preferably quantitative, because these are easier to compare). Without making predictions and comparing the skill of new models to old ones, we can’t track if we are making progress! A key point here is that the predictions must be testable! We do use a lot of models in ecology, and even use them to make predictions (e.g. species distribution models (SDMs), dynamic vegetation models (DVMs), etc), but these predictions are typically 50+ years into the future, which is way to long to wait to see if our predictions were reasonable or useful. A quick aside on model validation vs testing predictions: Testing predictions with new data collected after you’ve made your predictions is the most robust way to validate a model, but you usually want to do some form of validation before you make your final predictions to make sure the model is working reasonably well. For this we most commonly do some form of cross-validation, whereby we split the data into a “training” subset (that we use for fitting (or training) the model) and a “test” subset (that we try to predict). If your model is no good at predicting your test data, there’s probably no point in making predictions into the future… 3.6 Iterative near-term ecological forecasting The recent growth in interest in iterative ecological forecasting seeks to not only make prediction a central focus in ecology, but to do so on a time scale that is both useful for decision makers and allows us to learn from testing our predictions (days to decades). The “gold standard” here is an informatics pipeline that can ingest new data and make new forecasts automatically with minimal user input. This is a great initiative, but as we will see it poses a number of major challenges and requires a big improvement in quantitative skills in biology (hence this course…). Fortunately, as we will see during the module, any steps towards the gold standard is likely to be useful, even if you never get there. Here I break down the individual components of ecological forecasting (using figures from a lecture on data assimilation by Michael Dietze): You start with your initial conditions (data and knowledge that feeds into designing and fitting your model) You make forecasts (i.e. predictions into the future) using your model, based on your initial conditions. You monitor and collect new observations to compare with your forecasts and original observations (i.e. initial conditions). Finally, you analyze the new observations in the context of your forecasts and original observations, and update the initial conditions for the next iteration of the forecast. Figure 3.8: The iterative ecological forecasting cycle in the context of the scientific method, demonstrating how we stand to learn from making iterative forecasts. From lecture on data assimilation by Michael Dietze. (Please excuse that the colours of the distributions have changed from above…). The key steps are: Make a forecast based on your current data and understanding Collect new observations and compare them to your forecast Analyze the new observations in the context of your forecast and original data Update estimates of the current state of the system (data and understanding), before making a new forecast Two things not indicated in this diagram are: that when making the forecast and analyzing the new observations you can learn about the various sources and drivers of uncertainty in your forecast and use that to adapt or guide what and how to monitor so that you can reduce those uncertainties developing this into an automated informatics pipeline is best dine in a reproducible research framework Iterative ecological forecasts are thus aimed at: applied outcomes, through providing evidence to support decision making knowledge generation through iterative learning i.e. the scientific method So it’s a great way of getting scientists to engage in real-world problems, demonstrating the value of our science, and learning by doing! 3.7 Iterative ecological forecasting in context The figure below from Dietze et al. (2018) provides an expanded representation of these conceptual links between iterative ecological forecasting, the scientific method, and decision making (here in the context of adaptive management, which is a management paradigm that focuses on learning by doing). Figure 3.9: Conceptual relationships between iterative ecological forecasting, adaptive decision-making, adaptive monitoring, and the scientific method cycles (Dietze et al. 2018). The iterative ecological forecasting cycle is tightly aligned to the scientific method cycle: Hypotheses (A) are embedded in models (B). The models integrate over uncertainties in initial conditions (IC), inputs, and parameters to make probabilistic forecasts (the purple distributions, Fx, in step C), sometimes for multiple alternative scenarios. New observations are then compared with these predictions (D) to update estimates of the current state of the system (Analysis) and assess model performance (E), allowing for the selection among alternative model hypotheses (Test and Refine). The iterative forecasting cycle also feeds into adaptive management and monitoring: In Adaptive Management and decision analysis, alternative decision scenarios are generated (2) based on an assessment of a problem (1). These decision scenarios are typically used to define the scenarios (or boundary conditions) for which models are run (“Scenarios” arrow), but can also feed into scientific hypotheses (not shown). Forecasts (Fx) are key in assessing the trade-offs and relative merits between alternative decision options (3). The decision(s) taken (4) determine the monitoring requirements (5), which allow us to evaluate the outcomes and reassess the problem (1), and start the adaptive management cycle again. Note that the iterative forecast cycle is also useful for adaptive management in that the analysis and partitioning of forecast uncertainties (from step C) can provide further guidance on what and how to monitor, so as to optimize the reduction in model uncertainties. This represents Adaptive Monitoring (dashed line) and is a cycle of itself (Lindenmayer and Likens 2009), but is largely subsumed by the other cycles here so we won’t go into it any further here. Thus the iterative cycles of science, forecasting, management and monitoring are tightly intertwined and can interact continuously. 3.8 Reproducible research What isn’t clear from Figure 3.9 is that all of this needs to be founded on a highly efficient informatics pipeline that is robust and rapidly updateable. Since the emphasis here is on near-term forecasts to inform management, if the process of adding new data and updating the forecasts is too slow, the value of the forecasts is lost. As we’ll see in future lectures, the best way to build a highly efficient informatics pipeline is to follow reproducible research principles (section 5), including good (and rapid) data management (section ??). Adding this link to Figure 3.9 helps to highlight what I like to think of as “The Olympian Challenge of data-driven ecological decision making”. Figure 3.10: The Olympian Challenge of data-driven ecological decision making. Working reproducibly requires learning a lot of skills and can take a lot of effort, but is well worth it beyond it’s utility for ecological forecasting - for you as an individual, and for science in general. This is why I decided to make it part of the title for the module and the focus of at least two lectures and the practical. References "],["forecasts.html", "4 Making forecasts 4.1 Proteaceae as a model organisms 4.2 Proteaceae as management indicators 4.3 Potential issues with the rules of thumb… 4.4 Assessing population viability 4.5 Climate and fire-driven changes in demographic rates and distribution 4.6 Near-term iterative ecological forecasts?", " 4 Making forecasts You’re probably wondering “What are ecological forecasts?” or “Where are we going with all this?” The focus of this section is to provide some context with an example of what I believe is one forecasting need and opportunity in the Fynbos Biome. I was going to give 3 examples, but rapidly realized it would be too long a lecture. I’ll be using the other examples to illustrate various principles in later lectures, but hopefully this example will provide some practical context for some of the issues we’ll address in the rest of the module. Note: This example has not yet been developed into full near-term iterative ecological forecasts sensu Dietze et al (2018). I also don’t think they necessarily have to get all the way there to be useful. Think of it as an “ecological forecasting spectrum” where the gold standard is fully developed and automated near-term iterative ecological forecasts. Figure 4.1: Conceptual relationships between iterative ecological forecasting, adaptive decision-making, adaptive monitoring, and the scientific method cycles (Dietze et al. 2018). I’ll start with a reminder that the goal here is to focus the forecasting effort on an applied real-world problem and to do so in a manner that allows us to learn and improve our scientific understanding of the system. 4.1 Proteaceae as a model organisms The Proteaceae are probably the best studied and understood plant family in the Fynbos Biome. They have been the focus of a number of large, focused research programmes and are used as indicator species for various conservation management applications. There has been extensive locality and demographic data have been collected by conservation authorities (CapeNature and SANParks), citizen scientists (Protea Atlas Project and iNaturalist) and researchers since the late 1970s and before, and this is reflected in the large (and growing) scientific literature on the family. Figure 4.2: Temporal dynamics of publications on South African Proteaceae based on a Web of Science search on 13 June 2012. Figure from Schurr et al. (2012). A huge benefit of the herculean Proteaceae data collection (and management) effort is that it provides all the data we need to parameterize various types of models. In fact, data on the Proteaceae have been hugely important for the global development of species distribution and demographic models (see Schurr et al. (2012), but also many subsequent papers). Because they are the best-studied group of plants in the Fynbos, they are heavily-utilized for informing conservation planning, management and monitoring. Some examples include informing: protected area planning wildfire management wildflower harvesting climate change monitoring I’m sure there are others I’ve forgotten… 4.2 Proteaceae as management indicators Our knowledge of the demography of the Proteaceae is used for the direct management of Fynbos in two ways: Firstly, at the species level, for setting guidelines for sustainable wild harvesting of their inflorescences Secondly, at the ecosystem level, to help determine acceptable fire return intervals A quick refresher on Proteaceae life cycles and demography: Figure 4.3: Protea cynaroides on Table Mountain showing current inflorescences and older (grey), closed cones that protect seeds from fire and release them into the post-fire environment. Figure 4.4: The fire-driven life-cycle of Fynbos Proteaceae species, including harvesting, taken from (Treurnicht et al. 2021). Population size/stability are determined by key demographic rates of adult fecundity (size of the canopy seed bank), post-fire seedling recruitment and adult fire survival (blue–grey boxes). These rates are affected in various ways by environmental conditions, density dependence, the timing, intensity and severity of fire, wildflower harvesting, etc The management guidelines are currently set by “rule of thumb”1: Wildflower harvesting: “[There should be no] harvesting until at least 50% of the population had commenced flowering, a harvest of up to 50% of current season flower heads after this stage, and no harvesting at least one year prior to a prescribed burn” (Wilgen et al. 2016) Fire return intervals: “No fire should be permitted in fynbos until at least 50% of the population of the slowest-maturing species in an area have flowered for at least three successive seasons (or at least 90% of the individuals of the slowest maturing species in the area have flowered and produced seed). Similarly, a fire is probably not necessary unless a third or more of the plants of these slow-maturing species are senescent (i.e. dying or no longer producing flowers and seed).” (CapeNature, n.d.) Both these rules are based on the premise that maintaining seed banks is the key to the persistence of Proteaceae populations. i.e. that there is a large enough seed bank present when a fire occurs for the population to recover. But is focusing on seeds alone reasonable? And if so, do the thresholds in the guidelines allow for enough seed? 4.3 Potential issues with the rules of thumb… Figure 4.5 presents extensive field data for 26 Proteaceae species from Treurnicht et al. (2016). What issues might these data suggest for the rules of thumb? Figure 4.5: Variation in demographic rates of 26 serotinous Proteaceae species of seeder and sprouter life-history types across their distribution range (Treurnicht et al. 2016). (a) Adult fire survival; (b) Individual fecundity (F); and (c) Per-capita recruitment rate (R). These issues include: species differ in their reliance on seed for their survival (e.g. sprouters vs seeders) sprouters have high persistence of adults through fires and need fewer new recruits from seed seeder adults are killed by fire, so populations depend entirely on recruitment from seed species vary in their fecundity (total number of seeds) fecundity = number of inflorescences produced multiplied by the number of seeds per inflorescence species vary in seed viability and recruitment success viability depends on pathogens, seed predators and other factors - many linked to the age of the seed or inflorescence seed-specific recruitment depends on viability and seed properties (size etc), conditions during the establishment phase (rainfall etc), finding suitable microsites, etc. per-capita recruitment is the combination of fecundity and seed-specific recruitment Figure 4.6 present variation within one species that suggests more issues… Figure 4.6: Intraspecific variation in (a) fecundity and (b) recruitment in response to range-wide variation in fire return interval (time since fire), adult population density and soil moisture stress (% days with soil moisture stress) for Protea punctata (Treurnicht et al. 2016). there is also intraspecific variation in fecundity and recruitment along climatic, soil, fire regime, population density, pollinator availability and other gradients and there is interspecific variation in this intraspecific variation i.e. species vary among populations in their response to climatic, soil, pollinator availability and other gradients 4.4 Assessing population viability Fortunately, we can address these issues by using the data in demographic models to perform population viability analysis under varying harvesting rates (e.g. Treurnicht et al. 2021). Figure 4.7: Sensitivity to wildflower harvesting for various Proteaceae species (Treurnicht et al. 2021). Above: Intraspecific variation in sensitivity to harvesting depicted as maps for four different species with pink dots highlighting where the change in population-level extinction probability (the difference between extinction probabilities under 0% and 50% harvesting) is greater than 0.1. The white and black areas depict species-specific occurrence records and the geographical distribution of all Proteaceae in the Cape Floristic Region, respectively. Below: Interspecific variation in sensitivity to harvesting depicted as the proportion of populations per species that are highly vulnerable to harvesting. These models suggest that following the current harvesting guidelines can greatly increase the probability of many populations going extinct (Figure 4.7; Treurnicht et al. (2021)), and that they would threaten a large portion of populations for some species, including the most commercially valuable ones! But is that enough? So what should the harvesting guidelines be? Are we sure they would be effective and what if there are “ecological surprises” that make them inappropriate? For example, Treurnicht et al. (2021) did not consider changing climate or fire regimes? Should we just ban wildflower harvesting altogether to be safe? While it isn’t a huge industry, a ban would be undesirable for a number of reasons: many livelihoods depend on wildflower harvesting, often among the very poor while some species are targeted and may decline as a result, at least it’s still Fynbos. Removing the option to earn from that land would risk forcing the landowner to consider more destructive land use activities or potentially convert it to other land cover types while some species may struggle under the existing guidelines, some species are largely unaffected and can quite happily be harvested What we really need is ongoing monitoring and updated forecasts that respond and adjust the guidelines to allow sustainable harvesting while not threatening the species. Ideally, these forecasts would include the impacts of changing climate and fire. 4.5 Climate and fire-driven changes in demographic rates and distribution Merow et al. (2014) combined demographic modelling and species distribution modelling using a “Demographic Distribution Model” whereby they used spatial covariation between demographic rates and environmental conditions to infer where the species can maintain positive population growth rates under current and future climate and fire conditions. Interesting side note: This analysis used integral projection models (IPMs), which you can think of as the “next generation” of the Leslie matrix model that you will be familiar with. In IPMs the state variable is size (not age) and there are far more classes (i.e. rows and columns in the “matrix”). The (very oversimplified explanation of) the advantage of this is that you can build regression models for the vital rates as a function of plant size and environmental parameters and then relate those back to your transition matrix. This allows you to explore the effect of spatial covariates (climate, soil, fire, etc) on demographic rates, which would be very difficult to do if you only had a few size classes. This also allow you to make projections for different conditions, allowing you to explorethe effetcs of climate change, altered fire regimes, etc. Figure 4.8: Estimated vital rates of Protea repens across the CFR. Figure from Merow et al. (2014). First, they modeled the species’ individual vital rates as a function of environmental variation across its range (Figure 4.8). Then they combined them to estimate the population growth rates \\(\\lambda\\) per pixel, providing an indication of where the population should remain stable or increase (\\(\\lambda&gt;1\\)) or decline and go extinct (\\(\\lambda&lt;1\\)). This was used as a threshold to map the species’ distribution (Figure 4.9). Figure 4.9: Model evaluation of the predicted population growth rate (\\(\\lambda\\)) and distribution of Protea repens across the CFR. (a) Mean \\(\\lambda\\) and (b) interquartile range of \\(\\lambda\\). (c–d) Evaluation of (a) using presence/absence data. (e) Posterior probability that \\(\\lambda\\) &gt; 1, representing a viable population. (f) Evaluation of (a) using ordinal abundance data. Figure from Merow et al. (2014). Once they’d done this validation and established that the model worked reasonably well they were able to do projections under altered fire regimes or climate conditions (Figure 4.10). Figure 4.10: Projections of the change in population growth rates of Protea repens under different scenarios. (a–b) Reducing (increasing) the observed fire return time by 4 yr. (c) Variation of mean population growth rate as a function of fire return time. The horizontal dashed line indicates where the growth rate = 1. (d) The difference between present day predictions and projections under future climate change scenario with temperature increased by 1 degree and precipitation reduced by 10%. Figure from Merow et al. (2014). There’s a lot of interesting spatial variation in the species’ expected response to changing conditions! The beauty of this analysis is that it: can tell us where we are most likely to see a negative response - guiding where to monitor can break that response down into its component vital rates - i.e. growth, seed production (fecundity), survival, etc - which are all things that are relatively easy to monitor! can easily include or be used to derive sustainable harvesting rates 4.6 Near-term iterative ecological forecasts? So we have the initial data and models required to be able to monitor and forecast multiple Proteaceae species responses to harvesting, wildfire and changing climatic conditions. While the work by Merow et al. (2014), Treurnicht et al. (2021) and others represent ecological forecasts, they currently aren’t iterative, so we are missing the opportunity to learn and refine the models. This also means that we’re not feeding up-to-date information to planners and decision makers. What do we need to do to develop them into near-term iterative ecological forecasts? Figure 4.11: The iterative ecological forecasting cycle in the context of the scientific method, demonstrating how we stand to learn from making iterative forecasts. From lecture on data assimilation by Michael Dietze. (Please excuse that the colours of the distributions have changed from above…). Firstly, they are either not specific about when they are forecasting to (e.g. Treurnicht et al. (2021) ran their models to estimate extinction probabilities over 100 years in response to different harvesting regimes), or they are too far into the future to be amenable to iterative assessment, learning and updating (e.g. Merow et al. (2014) project to 2050). We need to make the forecasts near-term, such as a range of scenarios 5-10 years into the future, or 1-2 years into the next fire cycle. Secondly, while various parties hold various datasets, we need to coordinate data collection among citizen scientists, conservation authorities, scientists, etc and centralize data management so that it can feed data back into the modelling workflow. Thirdly, we need to adapt the models and workflow to be able to ingest and assimilate new data and produce new forecasts automatically. Lastly, we need to make sure that the models adequately characterize and propagate uncertainty throughout the analyses so that we can focus data collection and model development to reduce the uncertainty in forecasts. Fortunately, the models are built in a Bayesian framework and already do a pretty good job of handling uncertainty. Clearly, while huge effort has been invested into the demography of Proteaceae, and they are likely to be one of the lowest hanging fruit for development into near-term iterative ecological forecasts, there is a lot more work to be done! Still, the history of productive research on Proteaceae shows it would clearly be worth the effort, and we already have decades of data that allow us to learn by backcasting or forecasting from old to more recently collected data. Even if early forecasts are woefully wrong, they will help us learn and improve. Once the informatics pipeline is developed, we could start adding other species - e.g. restios, ericas, animals, etc. This is important because the fire requirements for Proteaceae are not necessarily representative of all Fynbos species… “The need to start forecasting is now; the time for making ecology more predictive is here, and learning by doing is the fastest route to drive the science forward.” - Dietze et al. (2018) References "],["reproducibility.html", "5 Reproducible research 5.1 The Reproducibility Crisis 5.2 Replication and the Reproducibility Spectrum 5.3 Why work reproducibly? 5.4 Barriers to working reproducibly 5.5 Reproducible Scientific Workflows", " 5 Reproducible research 5.1 The Reproducibility Crisis “Replication is the ultimate standard by which scientific claims are judged.” (Peng 2011) Replication is one of the fundamental tenets of science and if the results of a study or experiment cannot by replicated by an independent set of investigators then whatever scientific claims were made should be treated with caution! At best, it suggests that evidence for the claim is weak or mixed, or specific to particular ecosystems or other circumstances and cannot be generalized. At worst, there was error (or even dishonesty) in the original study and the claims were plainly false. In other words, published research should be robust enough and the methods described in enough detail that anyone else should be able to repeat the study (using the publication only) and find similar results. Sadly, this is rarely the case!!! Figure 5.1: ‘Is there a reproducibility* crisis?’ Results from a survey of &gt;1500 top scientists (Baker 2016; Penny 2016). *Note that they did not discern between reproducibility and replicability, and that the terms are often used interchangeably. We have a problem… Since we’re failing the gentleman’s agreement2 that we’ll describe our methods in enough detail that anyone else should be able to repeat the study (using the publication only) and find similar results, modern scientists are trying to formalize the process in the form of Reproducible Research. Reproducible research makes use of modern software tools to share data, code and other resources required to allow others to reproduce the same result as the original study, thus making all analyses open and transparent. Working reproducibly is not just a requirement for using quantitative approaches in iterative decision-making, it is central to scientific progress!!! 5.2 Replication and the Reproducibility Spectrum While full replication is a huge challenge (and sometimes impossible) to achieve, it is something all scientists should be working towards. Understandably, some studies may not be entirely replicable purely due to the nature of the data or phenomenon (e.g. rare phenomena, long term records, loss of species or ecosystems, or very expensive once-off science projects like space missions). In these cases the “gold standard” of full replication (from new data collection to results) cannot be achieved, and we have to settle for a lower rung on the reproducibility spectrum (Figure 5.2). Figure 5.2: The Reproducibility Spectrum (Peng 2011). Reproducibility falls short of full replication because it focuses on reproducing the same result from the same data set, rather than analyzing independently collected data. While this may seem trivial, you’d be surprised at how few studies are even reproducible, let alone replicable. 5.3 Why work reproducibly? Figure 5.3: Let’s start being more specific about our miracles… Cartoon © Sidney Harris. Used with permission ScienceCartoonsPlus.com In addition to basic scientific rigour, working reproducibly is hugely valuable, because: (Adapted from “Five selfish reasons to work reproducibly” (Markowetz 2015)) Its transparent and open, helping us avoid mistakes and/or track down errors in analyses This is what highlighted the importance of working reproducibly for me. In 2017 I published the first evidence of observed climate change impacts on biodiversity in the Fynbos Biome (Slingsby et al. 2017). The analyses were quite complicated, and when working on the revisions I found an error in my R code. Fortunately, it didn’t change the results qualitatively, but it made me realize how easy it is to make a mistake and potentially put the wrong message out there! This encouraged me to make all data and R code from the paper available, so that anyone is free to check my data and analyses and let me (and/or the world) know if they find any errors. It makes it easier to write papers e.g. Dynamic documents like RMarkdown or Jupyter Notebooks update automatically when you change your analyses, so you don’t have to copy/paste or save/insert all tables and figures - or worry about whether you included the latest versions. It helps the review process Often issues picked at by reviewers are matters of clarity/confusion. Sharing your data and analyses allows them to see exactly what you did, not just what you said you did, allowing them to identify the problem and make constructive suggestions. It’s also handy to be able to respond to a reviewer’s comment with something like: “That’s a great suggestion, but not really in line with the objectives of the study. We have chosen not to include the suggested analysis, but do provide all data and code so that interested readers can explore this for themselves.” (Feel free to copy and paste - CCO 1.0) It enables continuity of the research When people leave a project (e.g. students/postdocs), or you forget what you did X days/weeks/months/years ago, it can be a serious setback for a project and make it difficult for you or a new student to pick up where things left off. If the data and workflow are well curated and documented this problem is avoided. Trust me, this is a very common problem!!! I have many papers that I (or my students) never published and may never go back to, because I know it’ll take me a few days or weeks to understand the datasets and analyses again… This is obviously incredibly important for long-term projects! A little bit of extra effort early on can save a lot of time further down the road!!! It helps to build your reputation Working reproducibly makes it clear you’re an honest, open, careful and transparent researcher, and should errors be found in your work you’re unlikely to be accused of dishonesty (e.g. see my paper example under point 1 - although no one has told me of any errors yet…). When others reuse your data, code, etc you’re likely to get credit for it - either just informally, or formally through citations or acknowledgements (depending on the licensing conditions you specify - see “Preserve” in the Data Life Cycle). And some less selfish reasons (and relevant for ecoforecasting): It speeds progress in science by allowing you (or others) to rapidly build on previous findings and analyses Somewhat linked to point 4, but here the focus is on building on published work. For example, if I read a paper and have an idea (or develop a new hypothesis) that may explain some of their results or add to the story, I can start from where they left off rather than collecting new data, recoding their whole analysis, etc before I can even start. It allows easy comparison of new analytical approaches (methods, models, etc) to older ones Linked to 6, but more specific to model or methods development where the need to “benchmark” your new method relative to an older one is important. If the benchmark model exists you can make an honest comparison, but if you have to set up the older one yourself, some may accuse you of gaming the system by chosing settings etc that advantage your new method. It makes it easy to repeat the same analyses when new data are collected or added This is key for iterative forecasting, but also useful if you want to apply the same method/model to a new data set (e.g. applying Merow et al. (2014)’s analysis on all 26 Proteaceae studied by Treurnicht et al. (2016)). Most skills and software used in Reproducible Research are very useful beyond Reproducible Research alone! e.g. GitHub - in addition to versioning code etc is great for code management, collaborative projects and can be used for all kinds of things like building websites (e.g. these course notes). And one more selfish reason (but don’t tell anyone I said this): Reproducible research skills are highly sought after in careers like data science etc… Skills are important should you decide to leave biology… Even withing biology, more and more environmental organizations and NGOs are hiring data scientists or scientists with strong data and quantitative skills. Some examples I know of: The South African Environmental Observation Network (SAEON - especially their data node uLwazi) The Endangered Wildlife Trust (EWT) The Nature Conservancy 5.4 Barriers to working reproducibly (Adapted from “A Beginner’s Guide to Conducting Reproducible Research” (Alston and Rick 2021)) 1. Complexity There can be a bit of a learning curve in getting to know and use the tools for reproducible research effectively. One is always tempted by the “easy option” of doing it the way you already know or using “user-friendly” proprietary software. 2. Technological change Hardware and software used in analyses change over time - either changing with updates or going obsolete altogether - making it very difficult to rerun old analyses. This should be less of a problem going forward because: it is something people are now aware of (so we’re working on solutions) we’re increasingly using open source software, for which older versions are usually still made available and there is little risk of it disappearing when the software company stops supporting the software or goes bankrupt documenting hardware and software versions with analyses is an easy baseline increasingly people are using contained computing environments as we’ll discuss below 3. Human error Simple mistakes or failure to fully document protocols or analyses can easily make a study irreproducible. Most reproducible research tools are aimed at solving this problem. 4. Intellectual property rights Rational self-interest can lead to hesitation to share data and code via many pathways: Fear of not getting credit; Concern that the materials shared will be used incorrectly or unethically; etc Hopefully most of these issues will be solved by better awareness of licensing issues, attribution, etc, as the culture of reproducible research grows 5.5 Reproducible Scientific Workflows Figure 5.4: ‘Data Pipeline’ from xkcd.com/2054, used under a CC-BY-NC 2.5 license. Working reproducibly requires careful planning and documentation of each step in your scientific workflow from planning your data collection to sharing your results. This entails a number of overlapping/intertwined components, namely: Data management - which we’ll spend more time on in Chapter ?? File and folder management Coding and code management - i.e. the data manipulation and analyses performed Computing environment and software Sharing of the data, metadata, code, publications and any other relevant materials For the rest of this section we’ll work through these components and some of the tools that help you achieve this. 5.5.1 File and folder management Project files and folders can get unwieldy fast, and can really bog you down and inhibit productivity when you don’t know where your files are or what the latest version is. Figure 5.5: ‘Documents’ from xkcd.com/1459, used under a CC-BY-NC 2.5 license. The two main considerations for addressing this issue are defining a simple, common, intuitive folder structure, and using informative file names. Folders Most ecological projects have similar requirements. Here’s a screenshot of how I usually (try to) manage my folders. “Code” we’ll deal with in the next section, but obviously contains R code etc to perform analyses. Within “Data” I often have separate folders of “Raw” and “Processed” data. If the data files are big and used across multiple projects (e.g. GIS files), then they’ll often be in a separate folder elsewhere on my computer, but this is well-documented in my code. “Output” contains figures and tables, often in separate folders. I also often have a “Manuscript” folder if I’m working in LaTeX/Sweave or RMarkdown, although this is often in the “Code” folder (since you can embed code in RMarkdown and Sweave documents). File and folder naming Your naming conventions should be: machine readable i.e. avoid spaces and funny punctuation support searching and splitting of names (e.g. “data_raw_CO2.csv,” “data_clean_CO2.csv,” “data_raw_species.csv” can all be searched by keywords and can be split by “_” into 3 useful fields: type (data vs other), class (raw vs clean), variable (CO2 vs species), etc) human readable the contents should be self evident from the file name support sorting i.e. use numeric or character prefixes to separate files into different components or steps (e.g. “data_raw_localities.csv,” “data_clean_localities.csv,” etc) some of this can be handled with folder structure, but you don’t want too many folders either Find out more about file naming here. 5.5.2 Coding and code management Why write code? Working in point-and-click GUI-based software like Excel, Statistica, SPSS, etc may seem easier, but you’ll regret it in the long run… The beauty of writing code lies in: Automation You will inevitably have to adjust and repeat your analysis as you get feedback from supervisors, collaborators and reviewers. Rerunning code is one click, and you’re unlikely to introduce errors. Rerunning analyses in GUI-based software is lots of clicks and it’s easy to make mistakes, alter default settings, etc etc. Next time you need to do the same analysis on a different dataset you can just copy, paste and tweak your code. You code/script provides a record of your analysis Linked to the above, mature scientific coding languages like Python or R allow you to run almost any kind of analysis in one scripted workflow, even if it has diverse components like GIS, phylogenetics, multivariate or Bayesian statistics, etc. Most proprietary software are limited to one or a few specialized areas (e.g. ArcGIS, etc), which leaves you manually exporting and importing data between multiple software packages. This is very cumbersome, in addition to being a file-management nightmare… Most scripting environments are open source (e.g. R, Python, JavaScript, etc) Anyone wanting to use your code doesn’t have to pay for a software license It’s great for transparency - Lots of people can and have checked the background code and functions you’re using, versus only the software owner’s employees have access to the raw code for most analytical software There’s usually a culture of sharing code (online forums, with publications, etc) Here’s a motivation and some tutorials to help you learn R. Some coding rules It’s easy to write messy code. This can make it virtually indecipherable to others (and even yourself), slowing you and your collaborations down. It also makes it easy to make mistakes and not notice them. The overarching rule is to write code for people, not computers. Some basic rules: use consistent, meaningful and distinct names for variables and functions use consistent code and formatting style use commenting to document and explain what you’re doing at each step or in each function - purpose, inputs and outputs “notebooks” like RMarkdown or Jupyter Notebooks are very handy for fulfilling roles like documentation, master/makefiles etc and can be developed into reports or manuscripts write functions rather than repeating the same code modularize code into manageable steps/chunks or even separate them into separate scripts that can all be called in order from a master script or Makefile check for mistakes at every step!!! Beyond errors or warnings, do the outputs make sense? start with a “recipe” that outlines the steps/modules (usually as commented headers etc). This is very valuable for keeping you organized and on track, e.g. a common recipe in R: #Header indicating purpose, author, date, version etc #Define settings #Load required libraries #Read in data #Wrangle/reformat/clean/summarize data as required #Run analyses (often multiple steps) #Wrangle/reformat/summarize analysis outputs for visualization #Visualize outputs as figures or tables avoid proprietary formats i.e. use an open source scripting langauge and open source file formats only use version control!!! Version control Using version control tools like Git, SVN, etc can be challenging at first, but they can also hugely simplify your code development (and adaptation) process. While they were designed by software developers for software development, they are hugely useful for quantitative biology. I can’t speak authoritatively on version control systems (I’ve only ever used Git and GitHub), but here are the advantages as I see them. This version is specific to Git, but I imagine they all have similar functions and functionality: Words in italics are technical terms used within GitHub. You can look them up here. You’ll also cover it in the brief tutorial you’ll do when setting up your computer for the practical. They generally help project management, especially collaborations They allow you to easily share code with collaborators or the public at large - through repositories or gists (code snippets) Users can easily adapt or build on each others’ code by forking repositories and working on their own branch. This is truly powerful!!! It allows you to repeat/replicate analyses but even build websites (like this one!), etc While the whole system is online, you can also work offline by cloning the repository to your local machine. Once you have a local version you can push to or pull from the online repository to keep everything updated Changes are tracked and reversible through commits. If you change the contents of a repository you must commit them and write a commit message before pulling or pushing to the online repository. Each commit is essentially a recoverable version that can be compared or reverted to This is the essence of version control and magically frees you from folders full of lists of files named “mycode_final.R,” “mycode_finalfinal.R,” “myfinalcode_finalfinal.R” etc as per Figure 5.5 They allow collaborators or the public at large to propose changes via pull requests that allow you to merge their forked branch back to the main (or master) branch They allow you to accept and integrate changes seamlessly when you accept and merge pull requests They allow you to keep written record of changes through comments whenever a commit or pull request is made - these also track the user, date, time, etc and are useful for blaming when things go wrong There’s a system for assigning logging and tracking issues and feature requests I’m sure this is all a bit much right now, but should make more sense after the practical… 5.5.3 Computing environment and software We’ve already covered why you should use open source software whenever possible, but it bears repeating. Using proprietary software means that others have to purchase software, licenses, etc to build on your work and essentially makes it not reproducible by putting it behind a pay-wall. This is self-defeating… Another issue is that software and hardware change with upgrades, new versions or changes in the preferences within user communities (e.g. you’ll all know MicroSoft Excel, but have you heard of Quattro Pro or Lotus that were the preferred spreadsheet software of yesteryear?). Just sharing your code, data and workflow does not make your work reproducible if we don’t know what language the code is written in or if functions change or are deprecated in newer versions, breaking your code. The simplest way to avert this problem is to carefully document the hardware and versions of software used in your analyses so that others can recreate that computing environment if needed. This is very easy in R, because you can simply run the sessionInfo() function, like so: sessionInfo() ## R version 4.1.1 (2021-08-10) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.3 LTS ## ## Matrix products: default ## BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 ## ## locale: ## [1] LC_CTYPE=en_ZA.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_ZA.UTF-8 LC_COLLATE=en_ZA.UTF-8 ## [5] LC_MONETARY=en_ZA.UTF-8 LC_MESSAGES=en_ZA.UTF-8 ## [7] LC_PAPER=en_ZA.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_ZA.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets ## [6] methods base ## ## other attached packages: ## [1] hrbrthemes_0.8.0 forcats_0.5.1 stringr_1.4.0 ## [4] dplyr_1.0.7 purrr_0.3.4 readr_1.4.0 ## [7] tidyr_1.1.3 tibble_3.1.3 ggplot2_3.3.5 ## [10] tidyverse_1.3.1 ## ## loaded via a namespace (and not attached): ## [1] Rcpp_1.0.6 lattice_0.20-44 lubridate_1.7.10 ## [4] png_0.1-7 assertthat_0.2.1 digest_0.6.27 ## [7] utf8_1.2.2 R6_2.5.0 cellranger_1.1.0 ## [10] backports_1.2.1 reprex_2.0.0 evaluate_0.14 ## [13] httr_1.4.2 highr_0.9 pillar_1.6.2 ## [16] gdtools_0.2.3 rlang_0.4.11 readxl_1.3.1 ## [19] rstudioapi_0.13 extrafontdb_1.0 jquerylib_0.1.4 ## [22] Matrix_1.3-4 rmarkdown_2.11 labeling_0.4.2 ## [25] splines_4.1.1 extrafont_0.17 munsell_0.5.0 ## [28] broom_0.7.7 compiler_4.1.1 modelr_0.1.8 ## [31] xfun_0.24 pkgconfig_2.0.3 systemfonts_1.0.2 ## [34] mgcv_1.8-37 htmltools_0.5.1.1 tidyselect_1.1.1 ## [37] bookdown_0.22 fansi_0.5.0 crayon_1.4.1 ## [40] dbplyr_2.1.1 withr_2.4.2 grid_4.1.1 ## [43] nlme_3.1-152 jsonlite_1.7.2 Rttf2pt1_1.3.8 ## [46] gtable_0.3.0 lifecycle_1.0.0 DBI_1.1.1 ## [49] magrittr_2.0.1 scales_1.1.1 cli_3.0.1 ## [52] stringi_1.6.2 farver_2.1.0 fs_1.5.0 ## [55] xml2_1.3.2 bslib_0.2.5.1 ellipsis_0.3.2 ## [58] generics_0.1.0 vctrs_0.3.8 RColorBrewer_1.1-2 ## [61] tools_4.1.1 glue_1.4.2 jpeg_0.1-9 ## [64] hms_1.1.0 yaml_2.2.1 colorspace_2.0-2 ## [67] rvest_1.0.0 knitr_1.33 haven_2.4.1 ## [70] sass_0.4.0 Containers A “better” way to do this is to use containers like docker or singularity. These are contained, lightweight computing environments similar to virtual machines, that you can package with your software/workflow. You set your container up to have everything you need to run your code etc (and nothing extra), so anyone can download (or clone) your container, code and data and run your analyses perfectly first time. 5.5.4 Sharing of the data, code, publication etc This is touched on in more detail when we discuss data management in Chapter ??, but suffice to say there’s no point working reproducibly if you’re not going to share all the components necessary to complete your workflow… Another key component here is that ideally all your data, code, publication etc are shared Open Access - i.e. they are not stuck behind some paywall Figure 5.6: A 3-step, 10-point checklist to guide researchers toward greater reproducibility in their research (Alston and Rick 2021). References "],["practical.html", "6 Practical: Pair coding with GitHub 6.1 Objectives 6.2 Postfire regeneration 6.3 Modular Design 6.4 Task 1: Create &amp; Clone Repository 6.5 Task 2: Add the first function: download.NDVI 6.6 Task 3: Collaborator adds plot.NDVI 6.7 Task 4: Owner adds functions for model fitting using MLE 6.8 Task 5: Collaborator adds the master script, Owner answers the questions", " 6 Practical: Pair coding with GitHub Just a quick acknowledgement that I have adapted much of the framework for the following from Michael Dietze’s Pair coding practical that is a living online supplement to his book (Dietze 2017). Thanks for sharing the code under an MIT license Mike! The main differences are that I’ve changes the subject matter from looking at phenology in Tall Grass Prairie using PhenoCam data to looking at postfire vegetation growth in Fynbos using MODIS satellite Normalized Difference Vegetation Index (NDVI), a measure of vegetation “greenness.” This includes changing the core model we fit too. To complete this practical, you need to have done the preparation outlined in section 2. 6.1 Objectives The primary goal of this exercise is to gain experience working collaboratively to develop a scientific workflow. As such, this assignment must be completed with a partner. Specifically, we will outline an analysis, break the overall job into parts, and have each person complete part of the project. To put these parts together we will be using GitHub. Along the way we will also be exploring the statistical concept of Likelihood by fitting the same model and estimating the parameters with two different approaches - Least Squares (what you’d usually use for traditional linear models etc) and Maximum Likelihood. 6.2 Postfire regeneration The goal of our analysis is to investigate the regeneration of Fynbos vegetation after fire by exploring a time-series of 16-day composite Normalized Difference Vegetation Index (NDVI) from the MODIS satellite mission, a measure of vegetation “greenness.” You can read up on the data product here. We’ll be using data for one location (250m by 250m pixel) from the Silvermine section of Table Mountain National Park, and will be exploring the NDVI trajectory since the March 2015 fire. You can view the raw data in comma-separated value (.csv) format here. The workflow for this analysis with have three components: Download MODIS NDVI data Visualize the data Fit two competing negative exponential model using non-linear least squares (NLS) Fit the same models using Maximum Likelihood Estimation (MLE) and compare them using Akaike’s Information Criterion (AIC) From this overall design, let’s next outline the specific steps involved as pseudocode ### Fynbos Postfire Workflow ## Download NDVI data for one postfire recovery cycle ## Visualize data ## Fit two variants of the negative exponential model with NLS ## Visualize models and data ## Fit two variants of the negative exponential model with MLE ## Visualize models and data ## Compare model variants using AIC 6.3 Modular Design From this overall design we can look for ways to modularize the analysis. One feature that jumps out is that we need to visualize the data three times, so we should definitely make a function to do that. The inputs to the function would be an x-axis (age) and a y-axis (NDVI), which we might pass to the function as a dataframe for convenience. Since this is a graphing function we’d also like the ability to set all sorts of plot characteristics, which can be done in R by passing ... as an argument and then passing that on to the internal plot() call. The proposed function interface (i.e. metadata about inputs and outputs, but excluding the code) would thus be: ##&#39; Plot NDVI data ##&#39; ##&#39; @param dat dataframe that contains columns &quot;age&quot; and &quot;NDVI&quot; ##&#39; @param fit a fitted model to overlay on the data if present ##&#39; @param ... additional graphing parameters ##&#39; plot.NDVI &lt;- function(dat, fit = NA, ...) Next, because the raw data will be downloaded off the web and we need to convert the dates from “character” to “Date” class and convert the NDVI data from Digital Numbers (DN; most satellite sensors store and transmit data as DN for various reasons like because they are smaller and easier to transmit) to true NDVI values, let’s go ahead and create a download function. This function just needs to know the URL for where to find the data. Unlike the plot function, this function will return something (the data that was downloaded), so it would be good design to document what is returned and how it will be formatted: ##&#39; Download NDVI data ##&#39; ##&#39; @param URL web address where data is located ##&#39; @return data.frame with 16-day windows as rows, variables as columns download.NDVI &lt;- function(URL) Next we’ll fit two variants of a negative exponential model to the postfire NDVI trajectory data, and we’re going to do this twice - once using non-linear least squares (NLS), and again using Maximum Likelihood Estimation (MLE). Fortunately, there is already an efficient base R function for fitting the NLS model nls(), so we’ll only need to define functions for the MLE fits. The input to such a fit would obviously be the same data.frame that we’re using to make the plot. We’ll also need to input a vector of initial guesses at the model parameters to help the numerical optimization converge, and we’ll want to return the full output from that numerical optimization so that we can check if it converged successfully. Finally, optimizing MLE requires defining the model, and defining a function to optimize the parameters by minimizing the negative log of the likelihood We’re going to make (a) an independent function that we can call within (b), but can also call independently. The reason we want to be able to call it independently is that the MLE optimization will only return the list if parameters of the model (and not the model itself), so we won’t be able to plot the curve. If we make (a) a separate function, we can feed it the estimated model parameters to perform the model calculation and predict the shape of the curve, allowing us to plot it. In short, since we need the same function for two separate applications (the optimization and the plotting), it’s more efficient to define it as a separate function. First we’ll do the functions for the simpler variant of the model: ##&#39; Function (a) to define the model for the simple negative exponential model using MLE: ##&#39; @param theta vector of model parameters in order: alpha, gamma, lambda ##&#39; @param x vector of x values ##&#39; @return vector of model predictions pred.negexp &lt;- function(theta, x) ##&#39; Function (b) to fit the simple negative exponential model and minimize the -ln.likelihood ##&#39; @param dat dataframe of NDVI, age ##&#39; @param par vector of initial parameter guesstimates (on order of theta) ##&#39; @return output from numerical optimization fit.negexp.MLE &lt;- function(dat,par) Then we’ll do the functions for the full model: ##&#39; Function (a) to define the full model using MLE: ##&#39; @param theta vector of model parameters in order: alpha, gamma, lambda, A, phi (NOTE THE TWO EXTRA PARAMETERS!) ##&#39; @param x vector of x values ##&#39; @return vector of model predictions pred.negexpS &lt;- function(theta, x) ##&#39; Function (b) to fit the full model and minimize the -ln.likelihood ##&#39; @param dat dataframe of NDVI, age ##&#39; @param par vector of initial parameter guesstimates (on order of theta) ##&#39; @return output from numerical optimization fit.negexpS.MLE &lt;- function(dat,par) At this point we’ve spent a good bit of time up front on organization – we have a detailed plan of attack and have thought carefully about what each module is responsible for doing. Each task has well-defined inputs, outputs, and goals. Rather than facing a thankless job of documenting our code after we’re done, even though we haven’t written a single line of code yet we are largely done with our documentation. What remains to do is implementation. 6.4 Task 1: Create &amp; Clone Repository Because we’re going to employ version control in our project, our first step is to create the repository that our project will be stored in. To ensure that both you and your partner get to see every step of how to work with version control, for the rest of this exercise you are going to complete every step twice, once from the perspective of the OWNER of the repository and once as the COLLABORATOR. 6.4.1 OWNER Go to your account on github.com and under the Repositories tab click on the “New” button (green with a picture of a book on it) Choose a name for your repository, but make sure it’s different from your partner’s (Don’t choose a “Repository template,” and keep it a “Public” repository) Click the “Initialize this repository with a README” checkbox Optionally also provide a Description, Add a licence (e.g. MIT), and add R to the .gitignore (check “.gitignore” and search for the R template) Click “Create Repository” Copy the URL of your new repository either from the URL line in your internet browser or by clicking the clipboard icon To clone the repository, open up RStudio and create a New Project using this URL. Note: If you already have a project open it will close when you do so. Don’t worry, you can return to that project after the prac using the drop-down in the top-right of the RStudio window. Select New Project from the menu in the top right corner Select Version Control then Git Paste the URL in and click Create Project 6.5 Task 2: Add the first function: download.NDVI Within this project we’ll create separate files for each part of the analysis. To make the order of the workflow clear we’ll want to name the files systematically. In the first file we’ll implement the download.NDVI() function. NOTE: You’ll see that I’ve provided the R code for how I actually accessed the data using library(“MODISTools”), but have left that commented out. The function can take quite a long time so I thought best that we just read the output of that call from a file I’ve saved to the GitHub repository. ##&#39; Download MODIS NDVI data ##&#39; @param URL web address where data is located ##&#39; ## 1) How I really did it. For the prac we&#39;ll use option 2 because it&#39;s faster ## library(&quot;MODISTools&quot;) #Call R library MODISTools that allows us to download MODIS satellite data directly into R ## ## ndvi &lt;- mt_subset(product = &quot;MOD13Q1&quot;, ## lat = -34.100875, ## lon = 18.449375, ## band = &quot;250m_16_days_NDVI&quot;, ## start = &quot;2000-01-01&quot;, ## end = &quot;2021-10-01&quot;, ## progress = FALSE) ## ## 2) How we&#39;ll do it for the prac: Read the data from a .csv file in my github repository for the course notes ## download.NDVI &lt;- function(URL) { # Wrap function in an if/else loop that checks if the URL is valid if (length(URL) == 1 &amp; is.character(URL) &amp; substr(URL,1,4)==&quot;http&quot;) { # Read in data modat &lt;- read.csv(URL) # Convert Digital Numbers (more efficient for data storage) to NDVI modat$NDVI &lt;- modat$value*0.0001 # Convert calendar_date to class &quot;Date&quot; modat$calendar_date &lt;- as.Date(as.character(modat$calendar_date)) # Return the data return(modat) } else { # If the URL is not valid return... print(paste(&quot;download.NDVI: Input URL not provided correctly&quot;,URL)) } } 6.5.1 OWNER In RStudio, click File &gt; New File &gt; R Script Copy and Paste the above function into this file Select the code you have pasted in go to the menu Code &gt; Comment/Uncomment lines or alternatively use the quick keystroke Ctrl + Shift + c at once to remove the comments # Save the file as “01_download.NDVI.R” in the default directory for the R project From the “Git” tab (top-right window in RStudio), click the box next to the file you just created. This is equivalent to git add if you were doing this command line in bash or terminal Click Commit, enter a log message, and click Commit. This is equivalent to git commit in command line To push the change up to Github click on the green up arrow. This is equivalent to git push 6.6 Task 3: Collaborator adds plot.NDVI With the first function complete, let’s now imagine that a COLLABORATOR has been tasked with adding the second function. To do so they must first fork and clone the repository 6.6.1 COLLABORATOR Go to Github and navigate to the project repository within the OWNER’s workspace. Click “Fork,” which will make a copy of the repository to your own workspace. Copy the URL to your own version and follow the instructions above for cloning the repository in RStudio. Open a new file, enter the code below, and then save the file as “02_plot.NDVI.R” ##&#39; Plot NDVI data ##&#39; ##&#39; @param dat dataframe that contains columns &quot;age&quot; and &quot;NDVI&quot; ##&#39; @param fit a fitted model to overlay on the data if present ##&#39; @param ... additional graphing parameters ##&#39; plot.NDVI &lt;- function(dat, fit = NA, ...){ if(!is.null(dat)){ # Begin if/else statement # Base plot of the data points plot(dat$age, dat$NDVI, ylab = &quot;NDVI&quot;, xlab = &quot;Postfire age (Years)&quot;) if(!is.na(fit[1])){ #Begin inner if statement # Overlay the fitted model on the plot lines(dat$age, predict(fit, list(x = dat$age)), col = &#39;skyblue&#39;, lwd = 3) } # End inner if statement } else { print(&quot;plot.NDVI: input data not provided or invalid&quot;) } # End if/else statement } Follow the instructions above to Add, Commit, and Push the file back to your Github Next you want to perform a “pull request,” which will send a request to the OWNER that they pull your new code into their mainline version. From your Github page for this project, click on “Pull requests” (top left) and hit the green New Pull Request button. Follow the instructions, creating a title, message, and confirming that you want to create the pull request (you may be asked to confirm a couple of times). 6.6.2 OWNER Once the COLLABORATOR has created the pull request, you should get an automatic email and also be able to see the pull request under the “Pull Requests” tab on the Github page for the project. Read the description of the proposed changes and then click on “Files Changed” to view the changes to the project. New code should be in green, while deleted code will be in pink. The purpose of a pull request is to allow the OWNER to evaluate the code being added before it is added. You can see this option under the “Review” button. You can also hover your mouse over any line of code and insert an inline comment in the code (don’t do this during the prac). The COLLABORATOR would then have the ability to respond to any comments. In larger projects, all participants can discuss the code and decide whether it should be accepted or not. Furthermore, if the COLLABORATOR does any further pushes to Github before the pull request is accepted these changes will automatically become part of the pull request. While this is a very handy feature, it can also easily backfire if the COLLABORATOR starts working on something different in the meantime. This is the reason that experienced users of version control will use BRANCHES to keep different parts separate. Click on the “Conversation” page to return where you started. All participants can also leave more general comments on this page. If you are happy with the code, click “Merge Pull Request.” Alternatively, to outright reject a pull request you could click “Close pull request” (but please don’t do this in the prac unless your partner has made an error - PLEASE CHECK IF THEY’VE ADDED THE RIGHT FUNCTION ETC) 6.7 Task 4: Owner adds functions for model fitting using MLE We are now past the ‘set up’ stage for both the OWNER and the COLLABORATOR, so for this task we’ll explore the normal sequence of steps that the OWNER will use for day-to-day work 6.7.1 OWNER Pull the latest code from Github (which includes the new function added by your collaborator). In RStudio this is done by clicking the light blue down arrow on the Git tab. This is equivalent to the command line git pull origin master where origin refers to where you did your original clone from and master refers to your main branch (if you use branches you can pull other branches). Once you’ve pulled the latest code you should see the latest function file added to the files you can see in the “Files” tab of the bottom-right window of RStudio. Next, open up a new R file, add the code below, and save as “03_negexp.R” ##&#39; Functions to fit negative exponential model using MLE ##&#39; ##&#39; 1) Fit SIMPLE negative exponential model using maximum likelihood estimation ##&#39; ##&#39; Function (a) to define the model for the SIMPLE negative exponential model using MLE: ##&#39; @param theta parameter vector in order: alpha, gamma, lambda ##&#39; @param x vector of x values ##&#39; @return vector of model predictions pred.negexp &lt;- function(theta, x){ NDVI = theta[1] + theta[2] * (1 - exp(- x/theta[3])) } ##&#39; Function (b) to fit the SIMPLE negative exponential model and minimize the -ln.likelihood ##&#39; @param dat dataframe of NDVI, age ##&#39; @param par vector of initial parameter guesstimates (on order of theta) ##&#39; @return output from numerical optimization fit.negexp.MLE &lt;- function(dat,par){ ## define log likelihood lnL.negexp &lt;- function(theta,dat){ -sum(dnorm(dat$NDVI, pred.negexp(theta, dat$age), 0.001, log=TRUE), na.rm=TRUE) #Note that I added a standard deviation of 0.001 (in reality we should get that from the MODIS data) } ## fit by numerical optimization optim(par, fn = lnL.negexp, dat=dat, control = list(maxit = 1000)) } ########################################## ##&#39; 2) Fit negative exponential plus mystery term using maximun likelihood estimation ##&#39; Function (a) to define the FULL model using MLE: ##&#39; @param theta parameter vector in order: alpha, gamma, lambda, A, phi ##&#39; @param x vector of x values ##&#39; @return vector of model predictions pred.negexpS &lt;- function(theta, x){ NDVI = theta[1] + theta[2] * (1 - exp(- x/theta[3])) + theta[4] * sin(2*pi*x + (theta[5] + pi/6*(3 - 1))) } ##&#39; Function (b) to fit the full model and minimize the -ln.likelihood ##&#39; ##&#39; @param dat dataframe of NDVI, age ##&#39; @param par vector of initial parameter guesstimates (on order of theta) ##&#39; @return output from numerical optimization fit.negexpS.MLE &lt;- function(dat,par){ ## define log likelihood lnL.negexpS &lt;- function(theta,dat){ -sum(dnorm(dat$NDVI, pred.negexpS(theta, dat$age), 0.001, log=TRUE), na.rm=TRUE) #Note that I added a standard deviation of 0.001 (in reality we should get that from the MODIS data) } ## fit by numerical optimization optim(par, fn = lnL.negexpS, dat=dat, control = list(maxit = 1000)) } As before, add your new file under the Git tab, Commit the change, and push it back to Github A quick explanation of the Maximum Likelihood Estimation (MLE) functions To estimate the parameters in the model this function uses the likelihood principle which states that “a parameter value is more likely than another if it is the one for which the data are more probable.” In other words, the maximum likelihood estimate of a parameter is the value of the parameter for which the probability of obtaining the observed data if the highest. To use MLE we need to define a Likelihood, which is the relationship between the value of the parameter and the probability of some observed data. [For the record, the Likelihood is not a probability distribution because it does not integrate to 1]. In this case we’re assuming a Normal likelihood (hence the use of dnorm() in the function) and use a standard deviation (0.001) that I’ve made up to represent the uncertainty (ideally this should come from the data; e.g. the radiative transfer modelling that was used to estimate the “surface reflectance” MODIS product from the “top of atmosphere reflectance” that is actually observed by the satellite). In a more detailed analysis we’d want to follow up to check both these assumptions, but it’s a simple starting point for this practical demonstration. Applying the likelihood principle we would then look for the most likely value of \\(\\theta\\), the vector of parameters in the model (\\(\\alpha\\), \\(\\gamma\\) and \\(\\lambda\\) in the simpler model, and adding \\(A\\) and \\(\\phi\\) in the full model - see model equations below), which we call the Maximum Likelihood estimate. For a number or reasons that we won’t go into in this module, it is common to work with negative log likelihoods instead of likelihoods, in which case the negative implies that instead of looking for the maximum we’re now looking for the minimum (perhaps a bit difficult to get your head around, but it’s a small trade-off that makes for much easier mathematics). The fact that logarithm is a monotonic transformation means that taking the log does not change the location of this minimum. The code for this comes in three parts. First are the models themselves, pred.negexp() and pred.negexpS(), which translate the equations: For the “simple” model (pred.negexp()) it’s just a negative exponential: \\[\\begin{gather} \\text{NDVI}_{i,t}=\\alpha_i+\\gamma_i\\Big(1-e^{-\\frac{age_{i,t}}{\\lambda_i}}\\Big) \\end{gather}\\] For the “full” model (pred.negexpS()) we add a sine term: \\[\\begin{gather} \\text{NDVI}_{i,t}=\\alpha_i+\\gamma_i\\Big(1-e^{-\\frac{age_{i,t}}{\\lambda_i}}\\Big)+ A_i\\text{sin}\\Big(2\\pi\\times\\text{age}_{i,t}+\\Big[\\phi+\\frac{\\pi}{6}(m_{i,t}-1)\\Big]\\Big) \\end{gather}\\] Where: \\(\\alpha\\) is the NDVI at time 0 (i.e. directly after the fire) \\(\\gamma\\) is the maximum average increase in NDVI i.e. the maximum NDVI reached by the blue curve is \\(\\alpha + \\gamma\\) \\(\\lambda\\) is the rate of increase in NDVI \\(A\\) is the amplitude of the sine term \\(\\phi\\) adjusts the timing of the sine term to account for the month the fire occurred Second is the negative log likelihood function, lnL.negexp(), which we’re trying to minimize. The core of this is the Normal probability density, dnorm(). The first argument is the data, the second the is model, and the third is the standard deviation. The fourth argument says that we want to return the log density, which is much more accurate if it’s performed internally than if we take the log of what’s returned by dnorm. Since we have many data points dnorm returns a vector, which we then sum up and change the sign to turn this into a minimization problem. The third part is a call to a numerical optimization function, optim, that searches through parameter space to find the set of parameters that minimize the negative log likelihood (i.e. that Maximize the Likelihood). Arguments are the initial parameter guesstimates, the function being minimized, and any additional parameters that get passed on to that function. 6.8 Task 5: Collaborator adds the master script, Owner answers the questions The day-to-day workflow for the COLLABORATOR is similar, but not exactly the same as the OWNER. The biggest differences are that the COLLABORATOR needs to pull from the OWNER, not their own repository, and needs to do a pull request after the push. 6.8.1 COLLABORATOR Pull from OWNER. Unfortunately, this has to be done from the command line rather than the pull button within RStudio, which just pulls from the COLLABORATOR’s repository. In RStudio go to Tools &gt; Shell to open a terminal At the terminal type git pull URL main where URL is the address of the OWNER’s Github repository. Because it is a pain to always remember and type in the OWNER’s URL, it is common to define this as upstream git remote add upstream URL which is a one-time task, after which you can do the pull as git pull upstream main Navigate to https://github.com/jslingsby/BIO3019S_Ecoforecasting/blob/master/_04_Master.Rmd, copy the raw contents Open a new Rmd file in RStudio and paste the contents. Save this file as “04_Master.Rmd.” Within RStudio’s Git tab, add the file and Commit. Use the Push (up arrow) button to push this to your own repository On Github.com, submit a pull request 6.8.2 OWNER Evaluate and accept pull request. &gt;At this point your workflow should be complete and you should be able to run the analysis. Pull the updated repo to your local machine Open “04_Master.Rmd” and click “Knit” (top-centre of script window in RStudio) Answer the questions wherever you see the numbered questions “Q” and “&gt;Answer:” Once complete, commit “04_Master.Rmd” and push it back to the repo Finally, in RStudio Switch project to “pullltest” (or whatever you named the repo you forked when doing the preparation for the practical (steps 9-11 in section 2)) At the terminal type git pull https://github.com/JasperUCT/pullltest main to pull the repo to update Open the ReadMe Add your name and the link to the repo you owned and the repo you contributed to e.g. Jasper; Owner: https://github.com/JasperUCT/practest; Contributor: https://github.com/jslingsby/practest Save and commit Push to your fork of the repo Submit a pull request to me References "],["references.html", "References", " References "]]
